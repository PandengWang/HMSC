// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// mcmcProbitX
RcppExport SEXP mcmcProbitX(arma::mat& Y, arma::mat& Ylatent, arma::mat& X, arma::mat& paramX, arma::mat& meansParamX, arma::mat& precX, arma::vec& residVar, arma::mat& priorMeansParamX, arma::mat& priorVarXScaleMat, double priorVarXDf, double priorResidVarScale, double priorResidVarShape, double nsp, int nsite, int nparamX, int niter, int nburn, int thin, int verbose);
RcppExport SEXP HMSC_mcmcProbitX(SEXP YSEXP, SEXP YlatentSEXP, SEXP XSEXP, SEXP paramXSEXP, SEXP meansParamXSEXP, SEXP precXSEXP, SEXP residVarSEXP, SEXP priorMeansParamXSEXP, SEXP priorVarXScaleMatSEXP, SEXP priorVarXDfSEXP, SEXP priorResidVarScaleSEXP, SEXP priorResidVarShapeSEXP, SEXP nspSEXP, SEXP nsiteSEXP, SEXP nparamXSEXP, SEXP niterSEXP, SEXP nburnSEXP, SEXP thinSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Ylatent(YlatentSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type paramX(paramXSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type meansParamX(meansParamXSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type precX(precXSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type residVar(residVarSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type priorMeansParamX(priorMeansParamXSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type priorVarXScaleMat(priorVarXScaleMatSEXP);
    Rcpp::traits::input_parameter< double >::type priorVarXDf(priorVarXDfSEXP);
    Rcpp::traits::input_parameter< double >::type priorResidVarScale(priorResidVarScaleSEXP);
    Rcpp::traits::input_parameter< double >::type priorResidVarShape(priorResidVarShapeSEXP);
    Rcpp::traits::input_parameter< double >::type nsp(nspSEXP);
    Rcpp::traits::input_parameter< int >::type nsite(nsiteSEXP);
    Rcpp::traits::input_parameter< int >::type nparamX(nparamXSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(mcmcProbitX(Y, Ylatent, X, paramX, meansParamX, precX, residVar, priorMeansParamX, priorVarXScaleMat, priorVarXDf, priorResidVarScale, priorResidVarShape, nsp, nsite, nparamX, niter, nburn, thin, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rmvnorm
arma::mat rmvnorm(int n, arma::vec Mean, arma::mat Var);
RcppExport SEXP HMSC_rmvnorm(SEXP nSEXP, SEXP MeanSEXP, SEXP VarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Mean(MeanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Var(VarSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnorm(n, Mean, Var));
    return rcpp_result_gen;
END_RCPP
}
// sampleCondPred
arma::field<arma::cube> sampleCondPred(arma::mat& Y, arma::cube& EstModel, arma::mat residVar, int nsite, double nsp, int niter, int nsample, std::string family);
RcppExport SEXP HMSC_sampleCondPred(SEXP YSEXP, SEXP EstModelSEXP, SEXP residVarSEXP, SEXP nsiteSEXP, SEXP nspSEXP, SEXP niterSEXP, SEXP nsampleSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type EstModel(EstModelSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type residVar(residVarSEXP);
    Rcpp::traits::input_parameter< int >::type nsite(nsiteSEXP);
    Rcpp::traits::input_parameter< double >::type nsp(nspSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type nsample(nsampleSEXP);
    Rcpp::traits::input_parameter< std::string >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(sampleCondPred(Y, EstModel, residVar, nsite, nsp, niter, nsample, family));
    return rcpp_result_gen;
END_RCPP
}
// sampleYlatentPoisson
arma::mat sampleYlatentPoisson(arma::mat& Y, arma::mat& Ylatent, arma::mat& EstModel, arma::vec residVar, double nsp, int nsite);
RcppExport SEXP HMSC_sampleYlatentPoisson(SEXP YSEXP, SEXP YlatentSEXP, SEXP EstModelSEXP, SEXP residVarSEXP, SEXP nspSEXP, SEXP nsiteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Ylatent(YlatentSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type EstModel(EstModelSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type residVar(residVarSEXP);
    Rcpp::traits::input_parameter< double >::type nsp(nspSEXP);
    Rcpp::traits::input_parameter< int >::type nsite(nsiteSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleYlatentPoisson(Y, Ylatent, EstModel, residVar, nsp, nsite));
    return rcpp_result_gen;
END_RCPP
}
// sampleYlatentProbit
arma::mat sampleYlatentProbit(arma::uvec& Y0Loc, arma::uvec& Y1Loc, arma::mat& Ylatent, arma::mat& EstModel, arma::vec residVar, double nsp, int nsite);
RcppExport SEXP HMSC_sampleYlatentProbit(SEXP Y0LocSEXP, SEXP Y1LocSEXP, SEXP YlatentSEXP, SEXP EstModelSEXP, SEXP residVarSEXP, SEXP nspSEXP, SEXP nsiteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec& >::type Y0Loc(Y0LocSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type Y1Loc(Y1LocSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Ylatent(YlatentSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type EstModel(EstModelSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type residVar(residVarSEXP);
    Rcpp::traits::input_parameter< double >::type nsp(nspSEXP);
    Rcpp::traits::input_parameter< int >::type nsite(nsiteSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleYlatentProbit(Y0Loc, Y1Loc, Ylatent, EstModel, residVar, nsp, nsite));
    return rcpp_result_gen;
END_RCPP
}
